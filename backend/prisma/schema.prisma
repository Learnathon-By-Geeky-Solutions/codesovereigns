// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client-js"
  output       = "../node_modules/.prisma/client"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  username  String    @unique
  email     String?   @unique
  phone     String?   @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  address   Address[]
  payments  Payment[]
  cart      Cart[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  image       String?
  category    String
  price       Float?
  description String
  features    Json
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Cart        Cart[]
}

model Order {
  id        String    @id @default(uuid())
  userId    String
  status    Status    @default(UNPAID)
  total     Float?    @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cart      Cart[]
  user      User      @relation(fields: [userId], references: [id])
  payment   Payment[]
  address   Address[]
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int?     @default(1)
  price     Float?   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  address   String
  city      String
  district  String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  order     Order[]
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  orderId   String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

enum Status {
  PAID
  UNPAID
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
  FAILED
  PROCESSING
  COMPLETED
}
